@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Services
@attribute [Authorize]
@inject PlayerService _playerService

<AuthorizeView>
    <Authorized>
        <MudStack Spacing="2" Row="true">
            @if (_player != null)
            {
                <div style="justify-content:center; align-content:center;">
                    @_player.Username
                </div>
                <MudTooltip Text="Gold">
                    <MudStack Spacing="2" Row="true">
                        <div style="justify-content:center; align-content:center;">
                            <MudIcon Icon="@Presentation.Shared.Icons.Gold" />
                        </div>
                        <div style="justify-content:center; align-content:center;">
                            @_player.Gold
                        </div>
                    </MudStack>
                </MudTooltip>

                <div style="justify-content:center; align-content:center;">
                    <MudTooltip Text="Logout">
                        <a style="color:white" href="Account/Logout">
                            <MudIcon Icon="@Presentation.Shared.Icons.Logout" />
                        </a>
                    </MudTooltip>
                </div>
            }
            else
            {
                <Loading Size="Size.Small" />
            }
        </MudStack>
    </Authorized>
    <NotAuthorized>
        <div style="justify-content:center; align-content:center">
            <MudTooltip Text="Login">
                <a style="color:white" href="Account/Login?redirectUri=/">
                    <MudIcon Icon="@Presentation.Shared.Icons.Login" />
                </a>
            </MudTooltip>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private Player? _player;
    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);
        if (AuthenticationState is not null) _playerId = await _playerService.GetPlayerIdAsync(await AuthenticationState);

        if (_playerId is not null)
        {
            _player = await _playerService.GetPlayerAsync(_playerId);
            if (_player == null)
            {
                _player = new("Uninitialised", "Unintitalised");
            }
        }
    }
}