@using Kingdoms.Application.Features.Building.Commands
@using Kingdoms.Domain.Enums

@inject ISender _mediator

<MudDataGrid T="Building" Dense Items="Buildings">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="ToggleOverlay" />
        <MudIconButton Icon="@Icons.Material.Outlined.Remove" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.HoldingId" Title="Holding ID" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Level" />
        <PropertyColumn Property="x => x.ProductionRate" />
        <PropertyColumn Property="x => x.IsConstructed" Title="Is Constructed?" />
    </Columns>
</MudDataGrid>

<MudPopover TransformOrigin="Origin.CenterCenter" Open="_open" Fixed="true" Class="px-4 pt-4">
    <MudGrid Spacing="1">
        <MudItem xs="12">
            <MudSelect @bind-Value="_selectedType" Label="Select building.">
                @foreach (BuildingType item in Enum.GetValues(typeof(BuildingType))) {

                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            <div Class="d-flex align-center justify-center mud-width-full py-4">
                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="Build">Build</MudButton>
            </div>
        </MudItem>
        <MudItem xs="6">
            <div Class="d-flex align-center justify-center mud-width-full py-4">
                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" OnClick="ToggleOverlay">Cancel</MudButton>
            </div>
        </MudItem>
    </MudGrid>
</MudPopover>

@code {
    [Parameter]
    [EditorRequired]
    public ICollection<Building>? Buildings { get; set; }

    [Parameter]
    [EditorRequired]
    public Guid HoldingId { get; set; }

    [Parameter]
    public EventCallback OnBuildingConstructed { get; set; }

    private bool _open = false;
    private BuildingType _selectedType = BuildingType.Lumberyard;

    private Task ToggleOverlay()
    {
        _open = !_open;
        return Task.CompletedTask;
    }
    private async Task Build()
    {
        await _mediator.Send(new CreateBuildingCommand(HoldingId, _selectedType));
        await ToggleOverlay();
        await OnBuildingConstructed.InvokeAsync();
    }
    private async Task Remove()
    {

    }

}