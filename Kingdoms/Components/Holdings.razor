@page "/holdings"

@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Domain.Enums

@attribute [Authorize]
@inject ISender _mediator

@if (_holdings is null) {
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else {
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center pa-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="CreateHolding">Create Holding</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudCarousel ItemsSource="@_holdings" @bind-SelectedIndex="_selectedIndex" Style="height:50px;" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false">
                <ItemTemplate>
                    <MudPaper Class="d-flex justify-center align-center" Style="height:50px">
                        <MudText>@_holdings.ElementAt(_selectedIndex).Id</MudText>
                    </MudPaper>
                </ItemTemplate>
            </MudCarousel>
        </MudItem>
        <MudItem xs="12">
            <MudPaper>
                <h2>Id: @_holdings.ElementAt(_selectedIndex).Id</h2>
                <h2>Owner: @_holdings.ElementAt(_selectedIndex).PlayerId</h2>
                <h2>Type: @_holdings.ElementAt(_selectedIndex).Type</h2>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private List<Holding>? _holdings;
    private int _selectedIndex;
    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null) {
            var state = await AuthenticationState;
            _playerId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));
            if (_playerId is not null) {
                _holdings = await _mediator.Send(new GetHoldingsByPlayerIdQuery(_playerId));
            }
        }
        await base.OnInitializedAsync();
    }
    private async Task CreateHolding()
    {
        if (_playerId is not null) {
            await _mediator.Send(new CreateHoldingCommand(_playerId, HoldingType.Castle));
            _holdings = await _mediator.Send(new GetHoldingsByPlayerIdQuery(_playerId));
        }
        StateHasChanged();
    }
}