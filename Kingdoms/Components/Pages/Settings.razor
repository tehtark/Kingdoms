@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Services

@page "/settings"

@attribute [Authorize]
@inject PlayerService _playerService

@if (Player is null)
{
    <Loading></Loading>
}
else
{

    <MudGrid>
        <MudItem xs="12">
            <MudField Label="Username" Variant="Variant.Text">@Player.Username</MudField>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _playerId;
    private Player? Player;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null) _playerId = await _playerService.GetPlayerIdAsync(await AuthenticationState);

        if (_playerId is not null)
        {
            Player = await _playerService.GetPlayerAsync(_playerId);
        }
        await base.OnInitializedAsync();
    }

}