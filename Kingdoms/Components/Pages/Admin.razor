@page "/admin"
@using Kingdoms.Application.Features.Database.Commands
@using Kingdoms.Application.Features.Game.Queries
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Services

@implements IAsyncDisposable
@attribute [Authorize]
@inject NavigationManager _nav
@inject ISnackbar _snackbar
@inject DatabaseService _databaseService
@inject GameTickService _gameTickService
@inject PlayerService _playerService
@inject HoldingService _holdingService
@inject MapService _mapService

@if (!_isLoaded)
{
    <Loading />
}
else
{
    <h3>Admin</h3>

    @if (_tick is not null)
    {
        <h4>@_tick</h4>
    }

    <MudButton OnClick="ResetDatabase">Reset Database</MudButton>
    <MudPaper Class="d-flex align-center pa-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="ConstructHolding">Create Holding</MudButton>
        <MudSelect @bind-Value="_selectedState" Label="Select Country.">
            @foreach (string state in _states)
            {
                <MudSelectItem Value="@state">@state</MudSelectItem>
            }
        </MudSelect>
    </MudPaper>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _playerId;

    private bool _isLoaded = false;
    private int? _tick = null;
    private string _selectedState;
    private List<string> _states = null;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null) _playerId = await _playerService.GetPlayerIdAsync(await AuthenticationState);
        if (_playerId is not null)
        {
            if (_playerId != Environment.GetEnvironmentVariable("ADMIN_ID"))
            {
                _nav.NavigateTo("/", true);
            }
            _states = await _mapService.GetStates();

        }

        _tick = _gameTickService.Tick;
        _gameTickService.OnTickUpdated += OnTickUpdated;
        _isLoaded = true;
    }

    ValueTask IAsyncDisposable.DisposeAsync()
    {
        _gameTickService.OnTickUpdated -= OnTickUpdated;
        return ValueTask.CompletedTask;
    }

    private async Task OnTickUpdated()
    {
        _tick = _gameTickService.Tick;
        await InvokeAsync(StateHasChanged);
    }
    private async Task ResetDatabase()
    {
        await _databaseService.ResetDatabaseAsync();
        _snackbar.Add("Database reset!");
        _nav.NavigateTo("/", true);
    }
    private async Task ConstructHolding()
    {
        if (_playerId == null) return;
        await _holdingService.Construct(_playerId, HoldingType.Village, _selectedState);
    }

}