@page "/map"
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Map
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Services
@using Kingdoms.Components.Carousel
@using Newtonsoft.Json

@attribute [Authorize]

@inject HoldingService _holdingService
@inject PlayerService _playerService
@inject ISnackbar _snackbar

@if (!_loaded)
{
    <Loading />
}
else
{
    <MudGrid>
        <MudItem xs="10">
            <HoldingCarousel Holdings="_holdings" SelectedIndexChanged="OnSelectedIndexChanged"></HoldingCarousel>
        </MudItem>
        <MudItem xs="10">
            <SfMaps @ref=_sfMaps Background="#98c5f5" Width="100%" Height="calc(90vh - (var(--mud-appbar-height)))">
                <MapsEvents OnMarkerClick="OnMarkerClickEvent" OnPan="OnPanEvent" OnPanComplete="OnPanCompleteEvent" OnZoomComplete="@OnZoomCompleteEvent" />
                <MapsAreaSettings Background="#98c5f5" />
                <MapsCenterPosition Longitude="@_holdings[_selectedHolding].Longitude" Latitude="@_holdings[_selectedHolding].Latitude"></MapsCenterPosition>
                <MapsZoomSettings Enable="_canZoom" ZoomFactor="_zoomFactor" EnablePanning="_canPan" />
                <MapsLayers>
                    <MapsLayer ShapeData='new {dataOptions= _map }' TValue="string">
                        <MapsLayerSelectionSettings Enable="_canSelectLayer" Fill="green">
                            <MapsLayerSelectionBorder Color="White" Width="2"></MapsLayerSelectionBorder>
                        </MapsLayerSelectionSettings>
                        <MapsShapeSettings ColorValuePath="Color" />
                        <MapsMarkerSettings>
                            <MapsMarker Visible="_markersVisible" DataSource="@_holdings" TValue="Holding" Height="40" Width="40" AnimationDuration=0 Shape="Syncfusion.Blazor.Maps.MarkerType.Image" ImageUrl="@Presentation.Shared.Icons.Village">
                                <MapsMarkerSelectionSettings Enable="_canSelectMarker"></MapsMarkerSelectionSettings>
                                <MapsMarkerTooltipSettings Visible="_tooltipsVisible" ValuePath="Id"></MapsMarkerTooltipSettings>
                            </MapsMarker>
                        </MapsMarkerSettings>
                        <MapsDataLabelSettings Visible="true" LabelPath="State"></MapsDataLabelSettings>
                    </MapsLayer>
                </MapsLayers>
            </SfMaps>
        </MudItem>
        <MudItem xs="2">
            @_holdings[_selectedHolding].Id
        </MudItem>
    </MudGrid>

}
@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private SfMaps? _sfMaps;
    private string? _map;
    private bool _loaded = false;
    private bool _canSelectMarker = true;
    private bool _canSelectLayer = false;
    private int _zoomFactor = 10;
    private bool _canZoom = true;
    private bool _canPan = true;
    private bool _tooltipsVisible = true;
    private bool _markersVisible = true;

    private List<Holding>? _holdings;
    private List<Holding>? _playerHoldings;
    private int _selectedHolding;

    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null) _playerId = await _playerService.GetPlayerIdAsync(await AuthenticationState);

        if (_playerId is not null)
        {
            _playerHoldings = await _holdingService.GetPlayerHoldings(_playerId);
        }

        _map = Globals.Map;
        _holdings = await _holdingService.GetAllHoldingsAsync();
        _loaded = true;
    }

    private Task OnMarkerClickEvent(Syncfusion.Blazor.Maps.MarkerClickEventArgs args)
    {
        return Task.FromResult(_snackbar.Add($"Marker Clicked"));
    }

    public Task OnPanEvent(Syncfusion.Blazor.Maps.MapPanEventArgs args)
    {
        return Task.FromResult(_canSelectMarker = false);

    }

    public async Task OnPanCompleteEvent(Syncfusion.Blazor.Maps.MapPanEventArgs args)
    {
        await Task.Delay(500);

        _canSelectMarker = true;
    }

    public Task OnZoomCompleteEvent(Syncfusion.Blazor.Maps.MapZoomEventArgs args)
    {
        if (args.Scale < 2)
        {
            _markersVisible = false;
        }
        else
        {
            _markersVisible = true;
        }
        return Task.CompletedTask;
    }

    public Task OnSelectedIndexChanged(int value)
    {
        _zoomFactor = 10;
        _selectedHolding = value;
        return Task.CompletedTask;
    }
}