@page "/holdings"

@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Map
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Features.Building.Commands
@using Kingdoms.Application.Features.Building.Queries
@using Kingdoms.Application.Features.Resources.Queries
@using Kingdoms.Application.Services
@using Kingdoms.Components.Carousel
@using Kingdoms.Components.DataGrid
@using Kingdoms.Components.Information
@using Kingdoms.Domain.Entities
@using Kingdoms.Domain.Enums
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using NetTopologySuite.Geometries

@implements IAsyncDisposable
@attribute [Authorize]
@attribute [StreamRendering]

@inject NavigationManager _nav
@inject ISender _mediator
@inject ISnackbar _snackbar
@inject GameTickService _gameTickService
@inject HoldingService _holdingService
@inject MapService _mapService

@if (_holdings is null)
{
    <Loading />
}
else
{
    <MudGrid Spacing="1">
        @if (_holdings.Count > 0)
        {
            <MudItem xs="12">
                <HoldingCarousel Holdings="_holdings" SelectedIndexChanged="OnSelectedIndexChanged"></HoldingCarousel>
            </MudItem>
            <MudItem xs="12">
                <MudPaper>
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Expanded="true" Text="Information">
                            <HoldingInformation Holding="_holdings[_selectedIndex]" />
                        </MudExpansionPanel>
                        <MudExpansionPanel Expanded="true" Text="Resources">
                            <MudStack Spacing="2" Row="true">
                                <div style="justify-content:center; align-content:center">
                                    <MudTooltip Text="Wood">
                                        <MudIconButton Icon="@Presentation.Shared.Icons.Wood" />
                                    </MudTooltip>
                                    @_holdings[_selectedIndex].Resources?.Wood
                                </div>

                                <div style="justify-content:center; align-content:center">
                                    <MudTooltip Text="Stone">
                                        <MudIconButton Icon="@Presentation.Shared.Icons.Stone" />
                                    </MudTooltip>
                                    @_holdings[_selectedIndex].Resources?.Stone
                                </div>

                                <div style="justify-content:center; align-content:center">
                                    <MudTooltip Text="Iron">
                                        <MudIconButton Icon="@Presentation.Shared.Icons.Iron" />
                                    </MudTooltip>
                                    @_holdings[_selectedIndex].Resources?.Iron
                                </div>
                            </MudStack>
                        </MudExpansionPanel>
                        <MudExpansionPanel Expanded="true" Text="Buildings">
                            <BuildingsDataGrid Buildings="_holdings[_selectedIndex].Buildings" HoldingId="_holdings[_selectedIndex].Id" OnBuildingConstructed="RefreshData" />
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _playerId;
    private List<Holding>? _holdings = null;
    private int _selectedIndex;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null)
        {
            var state = await AuthenticationState;
            _playerId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));
            if (_playerId is not null)
            {
                await RefreshData();
            }
        }
        _gameTickService.OnTickUpdated += OnTickUpdated;

        await base.OnInitializedAsync();
    }

    ValueTask IAsyncDisposable.DisposeAsync()
    {
        _gameTickService.OnTickUpdated -= OnTickUpdated;
        _holdings = null;
        _playerId = null;
        return ValueTask.CompletedTask;
    }

    public async Task OnTickUpdated()
    {
        await RefreshData();
    }

    public async Task OnSelectedIndexChanged(int newIndex)
    {
        _selectedIndex = newIndex;
        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (_playerId is null) return;
        _holdings = await _holdingService.GetPlayerHoldings(_playerId);
        await InvokeAsync(StateHasChanged);
    }
}