@page "/holdings"

@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Features.Building.Commands
@using Kingdoms.Application.Features.Building.Queries
@using Kingdoms.Application.Features.Resources.Queries
@using Kingdoms.Application.Services
@using Kingdoms.Components.DataGrid
@using Kingdoms.Components.Information
@using Kingdoms.Domain.Entities
@using Kingdoms.Domain.Enums
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor

@implements IAsyncDisposable
@attribute [Authorize]
@attribute [StreamRendering]

@inject NavigationManager _nav
@inject ISender _mediator
@inject ISnackbar _snackbar
@inject GameTickService gameTickService

@if (_holdings is null) {
    <Loading />
}
else {
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center pa-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="CreateHolding">Create Holding</MudButton>
            </MudPaper>
        </MudItem>
        @if (_holdings.Count > 0) {
            <MudItem xs="12">
                <MudCarousel SelectedIndexChanged="OnSelectedIndexChanged" ItemsSource="@_holdings" Style="height:50px;" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="false">
                    <ItemTemplate>
                        <MudPaper Class="d-flex justify-center align-center" Style="height:50px">
                            <MudText>@_holdings[_selectedIndex].Id</MudText>
                        </MudPaper>
                    </ItemTemplate>
                </MudCarousel>
            </MudItem>
            <MudItem xs="12">
                <MudPaper>
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Expanded="true" Text="Information">
                            <HoldingInformation Holding="_holdings[_selectedIndex]" />
                        </MudExpansionPanel>
                        <MudExpansionPanel Expanded="true" Text="Resources">
                            Wood: @_holdings[_selectedIndex].Resources?.Wood<br />
                            Stone: @_holdings[_selectedIndex].Resources?.Stone<br />
                            Iron: @_holdings[_selectedIndex].Resources?.Iron<br />
                        </MudExpansionPanel>
                        <MudExpansionPanel Expanded="true" Text="Buildings">
                            <BuildingsDataGrid Buildings="_holdings[_selectedIndex].Buildings" HoldingId="_holdings[_selectedIndex].Id" OnBuildingConstructed="RefreshData" />
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _playerId;

    private List<Holding>? _holdings = null;
    private int _selectedIndex;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null) {
            var state = await AuthenticationState;
            _playerId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));
            if (_playerId is not null) {
                await RefreshData();
            }
        }

        gameTickService.OnTickUpdated += OnTickUpdated;

        await base.OnInitializedAsync();
    }

    ValueTask IAsyncDisposable.DisposeAsync()
    {
        gameTickService.OnTickUpdated -= OnTickUpdated;
        _holdings = null;
        _playerId = null;
        return ValueTask.CompletedTask;
    }

    public async Task OnTickUpdated()
    {
        await RefreshData();
    }

    public async Task OnSelectedIndexChanged(int newIndex)
    {
        _selectedIndex = newIndex;
        await RefreshData();
    }

    private async Task CreateHolding()
    {
        if (_playerId is null) return;
        await _mediator.Send(new CreateHoldingCommand(_playerId, HoldingType.Castle));
        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (_playerId is null) return;
        _holdings = await _mediator.Send(new GetHoldingsByPlayerIdQuery(_playerId));

        await InvokeAsync(StateHasChanged);
    }

}