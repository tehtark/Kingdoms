@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Player.Commands
@using Kingdoms.Application.Features.Player.Queries

@attribute [Authorize]
@inject ISender _mediator
@inject NavigationManager _nav
@inject IDialogService _dialogService

@if (isLoaded)
{
    if (_player is not null)
    {
        <PlayerInformation Player="_player" />
    }
    else
    {

        @CreatePlayer()
    }
}
else
{
    <Loading />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private bool isLoaded;

    private Player? _player;
    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null)
        {
            var state = await AuthenticationState;
            _playerId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));

            if (_playerId is not null)
            {
                _player = await _mediator.Send(new GetPlayerByIdQuery(_playerId));
            }
            isLoaded = true;
        }
    }

    private async Task CreatePlayer()
    {
        var dialog = await _dialogService.ShowAsync<PlayerNameChangeDialog>(
            "PlayerNameChangeDialog",
            new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    MaxWidth = MaxWidth.Medium
                });

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is not null)
        {
            var username = result.Data.ToString();
            await _mediator.Send(new CreatePlayerCommand(_playerId, username));
        }

        _nav.Refresh(true); // Refresh regardless of whether the player was created or not
    }
}