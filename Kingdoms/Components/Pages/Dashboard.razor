@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Player.Commands
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Components.Dialog
@using Kingdoms.Domain.Enums

@attribute [Authorize]
@inject ISender _mediator
@inject NavigationManager _nav
@inject IDialogService _dialogService

@if (isLoaded)
{
    if (_player is not null)
    {
    <MudGrid Spacing="4">
        <MudItem xs="12">
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Expanded="true" Text="Player Information">
                    ID: @_player.Id<br />
                    Username: @_player.Username<br />
                    Level: @_player.Level<br />
                    Experience: @_player.Experience<br />
                    Gold: @_player.Gold
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudItem>
    </MudGrid>
    }
}
else
{
    <Loading/>
}


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private bool isLoaded;

    private Player? _player;
    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null)
        {
            var state = await AuthenticationState;
            _playerId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));
            if (_playerId is not null)
            {
                // try and get the player from the database
                _player = await _mediator.Send(new GetPlayerByIdQuery(_playerId));

                // if the player is not found, create a new player
                if (_player is null)
                {
                    CreatePlayer();
                }

                isLoaded = true;
            }
        }

    }

    private async Task CreatePlayer()
    {
        var dialog = await _dialogService.ShowAsync<PlayerNameChangeDialog>(
            "PlayerNameChangeDialog",
            new DialogOptions { 
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium
             });
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            if (result.Data is not null)
            {
                var username = result.Data.ToString();
                await _mediator.Send(new CreatePlayerCommand(_playerId, username));
                _nav.Refresh(true);
            }
        } else
        {
            _nav.Refresh(true);
        }
    }
}