@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Player.Commands
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Application.Services

@attribute [Authorize]
@inject NavigationManager _nav
@inject IDialogService _dialogService
@inject PlayerService _playerService

@if (_loaded)
{
    if (_player is not null)
    {
        <PlayerInformation Player="_player" />
    }
    else
    {
        <PlayerInitialisation PlayerId="@_playerId" />
    }
}
else
{
    <Loading />
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private bool _loaded;

    private Player? _player;
    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null) _playerId = await _playerService.GetPlayerIdAsync(await AuthenticationState);

        if (_playerId is not null)
        {
            _player = await _playerService.GetPlayerAsync(_playerId);
        }
        _loaded = true;
    }
}