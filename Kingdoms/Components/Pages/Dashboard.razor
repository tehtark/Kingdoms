@using Kingdoms.Application.Features.Holding.Commands
@using Kingdoms.Application.Features.Holding.Queries
@using Kingdoms.Application.Features.Player.Commands
@using Kingdoms.Application.Features.Player.Queries
@using Kingdoms.Domain.Enums

@attribute [Authorize]
@inject ISender _mediator
@inject NavigationManager _nav

@if (isLoaded)
{
    @if (_player is not null)
    {
        <MudGrid Spacing="4">
            <MudItem xs="12">
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel Expanded="true" Text="Player Information">
                        ID: @_player.Id<br />
                        Username: @_player.Username<br />
                        Level: @_player.Level<br />
                        Experience: @_player.Experience<br />
                        Gold: @_player.Gold
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <PlayerBuilder PlayerId="@_playerId" OnPlayerCreated="OnPlayerCreated" />
    }
}
else
{
    <Loading></Loading>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private bool isLoaded;

    private Player? _player;
    private string? _playerId;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if (AuthenticationState is not null)
        {
            var state = await AuthenticationState;
            _playerId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));
            if (_playerId is not null)
            {
                // try and get the player from the database
                _player = await _mediator.Send(new GetPlayerByIdQuery(_playerId));
                isLoaded = true;
            }
        }

    }

    private Task OnPlayerCreated()
    {
        _nav.Refresh(true);
        return Task.CompletedTask;
    }

}