@using Kingdoms.Application.Features.Player.Commands
@using Kingdoms.Application.Features.Player.Queries
@attribute [StreamRendering]
@attribute [Authorize]
@inject ISender _mediator   

@if(_player is null) {
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
} else {
    <h1>ID: @_player.Id</h1>
    <h1>Username: @_player.Username</h1>
    <h1>Level: @_player.Level</h1>
    <h1>Experience: @_player.Experience</h1>
    <h1>Gold: @_player.Gold</h1>

}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private Player? _player;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(Globals.DefaultDelay);

        if(AuthenticationState is not null) {
            var state = await AuthenticationState;
            var authenticationId = await _mediator.Send(new GetPlayerIdFromAuthenticationStateQuery(state));
            if(authenticationId is not null) {

                // try and get the player from the database
                _player = await _mediator.Send(new GetPlayerByIdQuery(authenticationId));
                if(_player is null) {
                    //if the player couldn't be found create a new one.
                    _player = await _mediator.Send(new CreatePlayerCommand(authenticationId, "johndoe"));
                }
            }
        }

        await base.OnInitializedAsync();
    }
}
